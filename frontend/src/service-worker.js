/* eslint-disable no-restricted-globals, no-undef */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { openDB } from 'idb';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (fileExtensionRegexp.test(url.pathname)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache imágenes con estrategia Cache First
registerRoute(
  ({request}) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 días
      }),
    ],
  })
);

// Cachear recursos estáticos adicionales
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 días
      }),
    ],
  })
);

// Cachear fuentes
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com' || 
               url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 año
      }),
    ],
  })
);

// Cache API con Network First
registerRoute(
  ({url}) => url.pathname.startsWith('/api'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 minutos
      }),
    ],
  })
);

// Cachear más tipos de archivos
registerRoute(
  ({ request }) => 
    request.destination === 'script' || 
    request.destination === 'style' ||
    request.destination === 'document',
  new CacheFirst({
    cacheName: 'assets-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 1 semana
      }),
    ],
  })
);

// Mejorar el soporte offline para archivos multimedia
registerRoute(
  ({ request }) => 
    request.destination === 'audio' || 
    request.destination === 'video',
  new CacheFirst({
    cacheName: 'media-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 20,
        maxAgeSeconds: 14 * 24 * 60 * 60, // 2 semanas
      }),
    ],
  })
);

// Página offline personalizada
const offlineFallbackPage = '/offline.html';

// Precachear la página offline
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('offline-cache').then((cache) => {
      return cache.add(offlineFallbackPage);
    })
  );
});

// Mostrar página offline cuando no hay conexión
registerRoute(
  ({ request }) => request.mode === 'navigate',
  async ({ event }) => {
    try {
      return await new NetworkFirst({
        cacheName: 'pages-cache',
        plugins: [
          new ExpirationPlugin({
            maxEntries: 25,
            maxAgeSeconds: 7 * 24 * 60 * 60, // 1 semana
          }),
        ],
      }).handle({ event });
    } catch (error) {
      return caches.match(offlineFallbackPage);
    }
  }
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Manejo de notificaciones push
self.addEventListener('push', (event) => {
  const data = event.data.json();
  
  const options = {
    body: data.body || 'Notificación de Doctorfy',
    icon: '/logo192.png',
    badge: '/logo192.png',
    data: {
      url: data.url || '/'
    }
  };

  event.waitUntil(
    self.registration.showNotification(data.title || 'Doctorfy', options)
  );
});

// Manejo de clics en notificaciones
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  
  /* global clients */
  event.waitUntil(
    clients.matchAll({ type: 'window' }).then(clientList => {
      // Si ya hay una ventana abierta, enfócala
      for (const client of clientList) {
        if (client.url === event.notification.data.url && 'focus' in client) {
          return client.focus();
        }
      }
      // Si no hay ventana abierta, abre una nueva
      if (clients.openWindow) {
        return clients.openWindow(event.notification.data.url);
      }
    })
  );
});

// Sincronización en segundo plano
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-form-data') {
    event.waitUntil(syncFormData());
  }
});

// Función para sincronizar datos cuando hay conexión
async function syncFormData() {
  try {
    const db = await openDB('doctorfy-offline-db', 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains('offlineFormData')) {
          db.createObjectStore('offlineFormData', { keyPath: 'id', autoIncrement: true });
        }
      }
    });

    // Obtener todos los datos pendientes
    const tx = db.transaction('offlineFormData', 'readwrite');
    const store = tx.objectStore('offlineFormData');
    const pendingItems = await store.getAll();

    // Procesar cada elemento
    for (const item of pendingItems) {
      try {
        // Intentar enviar al servidor
        const response = await fetch(item.url, {
          method: item.method,
          headers: item.headers,
          body: JSON.stringify(item.data)
        });

        if (response.ok) {
          // Si se envió correctamente, eliminar de la base de datos
          await store.delete(item.id);
        }
      } catch (error) {
        console.error('Error syncing item:', error);
      }
    }

    await tx.done;
    return true;
  } catch (error) {
    console.error('Error during background sync:', error);
    return false;
  }
}

// Mejorar el manejo de enlaces externos
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);
  
  // Si es una solicitud a un dominio externo de confianza
  const trustedDomains = [
    'anthropic.com',
    'openai.com',
    'who.int',
    'mayoclinic.org'
  ];
  
  if (url.origin !== self.location.origin && 
      event.request.mode === 'navigate' &&
      trustedDomains.some(domain => url.hostname.includes(domain))) {
    
    // Podemos aplicar políticas especiales para estos dominios
    event.respondWith(
      fetch(event.request, { 
        credentials: 'omit',  // No enviar cookies a dominios externos
        mode: 'cors'          // Usar CORS para dominios externos
      }).catch(() => {
        return caches.match(offlineFallbackPage);
      })
    );
  }
});

// Implementar manejo de protocolos
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);
  
  // Manejar protocolos especiales (mailto:, tel:, etc.)
  if (url.protocol !== 'https:' && url.protocol !== 'http:') {
    // No interferir con estos protocolos
    return;
  }
});

// Any other custom service worker logic can go here. 